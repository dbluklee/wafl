version: '3.8'

networks:
  wafl-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres-data:
  rabbitmq-data:

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: wafl-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-aipos}
    ports:
      - "${POSTGRES_PORT:-5200}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: wafl-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend Core Services
  auth-service:
    build:
      context: ..
      dockerfile: backend/core/auth-service/Dockerfile
    container_name: wafl-auth-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/aipos?schema=public
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
    ports:
      - "4001:4001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  store-management-service:
    build:
      context: ..
      dockerfile: backend/core/store-management-service/Dockerfile
    container_name: wafl-store-management-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/aipos?schema=public
      - AUTH_SERVICE_URL=http://auth-service:4001
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "4002:4002"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  dashboard-service:
    build:
      context: ../backend/core/dashboard-service
      dockerfile: Dockerfile
    container_name: wafl-dashboard-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4003:4003"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  order-service:
    build:
      context: ../backend/core/order-service
      dockerfile: Dockerfile
    container_name: wafl-order-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - STORE_SERVICE_URL=${STORE_SERVICE_URL}
    ports:
      - "4004:4004"
    depends_on:
      - auth-service
      - store-management-service
      - postgres
      - rabbitmq
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  user-profile-service:
    build:
      context: ../backend/core/user-profile-service
      dockerfile: Dockerfile
    container_name: wafl-user-profile-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4009:4009"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  history-service:
    build:
      context: ../backend/core/history-service
      dockerfile: Dockerfile
    container_name: wafl-history-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4010:4010"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend Support Services
  api-gateway:
    build:
      context: ..
      dockerfile: backend/support/api-gateway/Dockerfile
    container_name: wafl-api-gateway
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - AUTH_SERVICE_URL=http://auth-service:4001
      - STORE_MANAGEMENT_SERVICE_URL=http://store-management-service:4002
      - ORDER_SERVICE_URL=http://order-service:4004
      - PAYMENT_SERVICE_URL=http://payment-service:4005
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "4000:4000"
    depends_on:
      - auth-service
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  payment-service:
    build:
      context: ../backend/support/payment-service
      dockerfile: Dockerfile
    container_name: wafl-payment-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - PG_API_KEY=${PG_API_KEY}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4005:4005"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  ai-service:
    build:
      context: ../backend/support/ai-service
      dockerfile: Dockerfile
    container_name: wafl-ai-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4006:4006"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  analytics-service:
    build:
      context: ../backend/support/analytics-service
      dockerfile: Dockerfile
    container_name: wafl-analytics-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
    ports:
      - "4007:4007"
    depends_on:
      - auth-service
      - ai-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  notification-service:
    build:
      context: ../backend/support/notification-service
      dockerfile: Dockerfile
    container_name: wafl-notification-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - SMS_API_KEY=${SMS_API_KEY}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4008:4008"
    depends_on:
      - auth-service
      - postgres
      - rabbitmq
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  scraping-service:
    build:
      context: ../backend/support/scraping-service
      dockerfile: Dockerfile
    container_name: wafl-scraping-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
    ports:
      - "4011:4011"
    depends_on:
      - auth-service
      - ai-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  qr-service:
    build:
      context: ../backend/support/qr-service
      dockerfile: Dockerfile
    container_name: wafl-qr-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4012:4012"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  inventory-service:
    build:
      context: ../backend/support/inventory-service
      dockerfile: Dockerfile
    container_name: wafl-inventory-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4013:4013"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  delivery-service:
    build:
      context: ../backend/support/delivery-service
      dockerfile: Dockerfile
    container_name: wafl-delivery-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4014:4014"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  hardware-service:
    build:
      context: ../backend/support/hardware-service
      dockerfile: Dockerfile
    container_name: wafl-hardware-service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
    ports:
      - "4015:4015"
    depends_on:
      - auth-service
      - postgres
    networks:
      - wafl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Services
  pos-admin-web:
    build:
      context: ..
      dockerfile: frontend/pos-admin-web/Dockerfile
    container_name: wafl-pos-admin-web
    environment:
      - VITE_API_BASE_URL=http://localhost:4000
    ports:
      - "4100:80"
    depends_on:
      - api-gateway
    networks:
      - wafl-network
    restart: unless-stopped

  qr-order-web:
    build:
      context: ../frontend/qr-order-web
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${EXTERNAL_API_URL:-http://localhost}
    container_name: wafl-qr-order-web
    ports:
      - "4001:80"
    depends_on:
      - api-gateway
    networks:
      - wafl-network
    restart: unless-stopped

  kitchen-display-web:
    build:
      context: ../frontend/kitchen-display-web
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${EXTERNAL_API_URL:-http://localhost}
    container_name: wafl-kitchen-display-web
    ports:
      - "4002:80"
    depends_on:
      - api-gateway
    networks:
      - wafl-network
    restart: unless-stopped

  # Reverse Proxy
  nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile
    container_name: wafl-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - api-gateway
      - pos-admin-web
      - qr-order-web
      - kitchen-display-web
    networks:
      - wafl-network
    volumes:
      - ../nginx/ssl:/etc/nginx/ssl:ro
    restart: unless-stopped

  # Mock Services for API Gateway Testing
  dashboard-service-mock:
    image: node:18-alpine
    container_name: wafl-dashboard-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4003
      - SERVICE_NAME=dashboard-service
    ports:
      - "4003:4003"
    networks:
      wafl-network:
        aliases:
          - dashboard-service
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  order-service-mock:
    image: node:18-alpine
    container_name: wafl-order-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4004
      - SERVICE_NAME=order-service
    ports:
      - "4004:4004"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  payment-service-mock:
    image: node:18-alpine
    container_name: wafl-payment-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4005
      - SERVICE_NAME=payment-service
    ports:
      - "4005:4005"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  ai-service-mock:
    image: node:18-alpine
    container_name: wafl-ai-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4006
      - SERVICE_NAME=ai-service
    ports:
      - "4006:4006"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  analytics-service-mock:
    image: node:18-alpine
    container_name: wafl-analytics-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4007
      - SERVICE_NAME=analytics-service
    ports:
      - "4007:4007"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  notification-service-mock:
    image: node:18-alpine
    container_name: wafl-notification-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4008
      - SERVICE_NAME=notification-service
    ports:
      - "4008:4008"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  user-profile-service-mock:
    image: node:18-alpine
    container_name: wafl-user-profile-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4009
      - SERVICE_NAME=user-profile-service
    ports:
      - "4009:4009"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  history-service-mock:
    image: node:18-alpine
    container_name: wafl-history-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4010
      - SERVICE_NAME=history-service
    ports:
      - "4010:4010"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  scraping-service-mock:
    image: node:18-alpine
    container_name: wafl-scraping-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4011
      - SERVICE_NAME=scraping-service
    ports:
      - "4011:4011"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped

  qr-service-mock:
    image: node:18-alpine
    container_name: wafl-qr-service-mock
    working_dir: /app
    volumes:
      - ./mock-service.js:/app/mock-service.js
      - ./package.json:/app/package.json
    environment:
      - PORT=4012
      - SERVICE_NAME=qr-service
    ports:
      - "4012:4012"
    networks:
      - wafl-network
    command: sh -c "npm install && npm start"
    restart: unless-stopped