version: '3.8'

# Production overrides for docker-compose.yml
services:
  # Infrastructure - Production settings
  postgres:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Use strong password from secrets
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../scripts/backup.sh:/usr/local/bin/backup.sh:ro
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    restart: always

  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    restart: always

  rabbitmq:
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    restart: always

  # Backend Core Services - Production settings
  auth-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  store-management-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  dashboard-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  order-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      replicas: 3  # High traffic service
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  user-profile-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  history-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  # Backend Support Services - Production settings
  api-gateway:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      replicas: 3  # Load balancing entry point
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  payment-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      replicas: 2  # Critical service
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  ai-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      replicas: 2  # Resource intensive
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    restart: always

  analytics-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    restart: always

  notification-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  scraping-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G  # Puppeteer needs more memory
        reservations:
          cpus: '0.5'
          memory: 1G
    restart: always

  qr-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  inventory-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  delivery-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  hardware-service:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always

  # Frontend Services - Production settings
  pos-admin-web:
    build:
      target: production
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: always

  qr-order-web:
    build:
      target: production
    deploy:
      replicas: 2  # Public facing
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: always

  kitchen-display-web:
    build:
      target: production
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: always

  # Nginx - Production settings
  nginx:
    volumes:
      - ../nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: always